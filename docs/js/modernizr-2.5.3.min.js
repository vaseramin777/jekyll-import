/* Modernizr 2.5.3 (Custom Build) | MIT & BSD
 * Build: http://www.modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-shiv-mq-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load
 */
;(function (window, document) {
  // Modernizr object
  var Modernizr = {
    _version: '2.5.3',
    _prefixes: ' -webkit- -moz- -o- -ms- '.split(' '),
    _domPrefixes: 'Webkit Moz O ms'.split(' '),
    _cssomPrefixes: 'Moz O ms'.split(' '),
    load: function () {
      yepnope.apply(window, [].slice.call(arguments, 0));
    }
  };

  // feature detection functions
  function testProp(prop, value) {
    var el = document.createElement('div'),
      props;

    if (!el.style) {
      return false;
    }

    prop = prop.replace(/^ms-/, 'Moz');
    props = prop.split('-');
    props[0] = props[0].toLowerCase();

    if (value !== undefined) {
      el.style[prop] = value;
    }

    return el.style[prop] !== undefined || el.style[props[0]] !== undefined;
  }

  function testAllProps(props) {
    var prop,
      i = 0,
      len = props.length;

    for (; i < len; i++) {
      prop = props[i];
      if (testProp(prop)) {
        return prop;
      }
    }

    return false;
  }

  function testStyles(prop, prefixes) {
    var el = document.createElement('div'),
      style;

    if (!el.style) {
      return false;
    }

    prop = prop.replace(/^ms-/, 'Moz');
    style = el.style;

    if (prefixes) {
      prop = (prefixes + prop).split(' ');
    }

    for (var i in prop) {
      style[prop[i]] = true;
    }

    return testProp(el.style.cssText.replace(/; /g, ';') + ';', prop[0]);
  }

  function contains(str, substr) {
    return !!~('' + str).indexOf(substr);
  }

  function cssClasses(el, className) {
    var oldClass = el.className,
      newClass = oldClass + ' ' + className;

    el.className = newClass;

    return (newClass.split(' ').length - oldClass.split(' ').length) > 0;
  }

  function prefixes(el, prop) {
    var prefix,
      result = {};

    if (el.style[prop] !== undefined) {
      return { dom: '', value: el.style[prop] };
    }

    for (var i in Modernizr._domPrefixes) {
      prefix = Modernizr._domPrefixes[i];
      if (el.style[prefix + prop] !== undefined) {
        return { dom: prefix, value: el.style[prefix + prop] };
      }
    }

    for (var i in Modernizr._cssomPrefixes) {
      prefix = Modernizr._cssomPrefixes[i];
      if (testStyles(prefix + prop)) {
        return { cssom: prefix, value: testStyles(prefix + prop) };
      }
    }

    return result;
  }

  // feature detection tests
  Modernizr.addTest = function (prop, callback) {
    if (typeof prop == 'object') {
      for (var i in prop) {
        Modernizr.addTest(i, prop[i]);
      }
    } else {
      prop = prop.toLowerCase();
      if (Modernizr[prop] === undefined) {
        Modernizr[prop] = callback();
      }
    }
  };

  Modernizr.testAllProps = testAllProps;
  Modernizr.testProp = testProp;
  Modernizr.testStyles = testStyles;
  Modernizr.contains = contains;
  Modernizr.cssClasses = cssClasses;
  Modernizr.prefixes = prefixes;

  // feature detection results
  Modernizr.touch = 'ontouchstart' in window;
  Modernizr.csstransforms3d = Modernizr.prefixes(document.documentElement, 'perspective').value;
  Modernizr.flexbox = Modernizr.testAllProps(['boxDirection', 'boxFlex', 'boxFlexGroup', 'boxLines', 'boxOrdinalGroup', 'boxPack', 'boxAlign']);
  Modernizr.canvas = !!document.createElement('canvas').getContext;
  Modernizr.canvastext = Modernizr.canvas && !!document.createElement('canvas').getContext('2d').fillText;
  Modernizr.webgl = (function () {
    try {
      var canvas = document.createElement('canvas');
      return !!window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
    } catch (e) {
      return false;
    }
  })();
  Modernizr.geolocation = !!navigator.geolocation;
  Modernizr.postmessage
